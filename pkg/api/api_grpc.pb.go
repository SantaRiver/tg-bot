// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api.proto

package investapi

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SharesServiceClient is the client API for SharesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharesServiceClient interface {
	AddShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*empty.Empty, error)
	GetShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Share, error)
}

type sharesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSharesServiceClient(cc grpc.ClientConnInterface) SharesServiceClient {
	return &sharesServiceClient{cc}
}

func (c *sharesServiceClient) AddShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tinkoff.public.invest.api.contract.v1.SharesService/AddShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharesServiceClient) GetShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Share, error) {
	out := new(Share)
	err := c.cc.Invoke(ctx, "/tinkoff.public.invest.api.contract.v1.SharesService/GetShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharesServiceServer is the server API for SharesService service.
// All implementations must embed UnimplementedSharesServiceServer
// for forward compatibility
type SharesServiceServer interface {
	AddShare(context.Context, *Share) (*empty.Empty, error)
	GetShare(context.Context, *Share) (*Share, error)
	mustEmbedUnimplementedSharesServiceServer()
}

// UnimplementedSharesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSharesServiceServer struct {
}

func (UnimplementedSharesServiceServer) AddShare(context.Context, *Share) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShare not implemented")
}
func (UnimplementedSharesServiceServer) GetShare(context.Context, *Share) (*Share, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShare not implemented")
}
func (UnimplementedSharesServiceServer) mustEmbedUnimplementedSharesServiceServer() {}

// UnsafeSharesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharesServiceServer will
// result in compilation errors.
type UnsafeSharesServiceServer interface {
	mustEmbedUnimplementedSharesServiceServer()
}

func RegisterSharesServiceServer(s grpc.ServiceRegistrar, srv SharesServiceServer) {
	s.RegisterService(&SharesService_ServiceDesc, srv)
}

func _SharesService_AddShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServiceServer).AddShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinkoff.public.invest.api.contract.v1.SharesService/AddShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServiceServer).AddShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharesService_GetShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServiceServer).GetShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinkoff.public.invest.api.contract.v1.SharesService/GetShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServiceServer).GetShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

// SharesService_ServiceDesc is the grpc.ServiceDesc for SharesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SharesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.public.invest.api.contract.v1.SharesService",
	HandlerType: (*SharesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShare",
			Handler:    _SharesService_AddShare_Handler,
		},
		{
			MethodName: "GetShare",
			Handler:    _SharesService_GetShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
